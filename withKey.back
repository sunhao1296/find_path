// 宝物类型定义
type Treasure struct {
	Type  string
	Value int
}

// 怪物类型定义
type Monster struct {
	Name    string
	HP      int
	ATK     int
	DEF     int
	Money   int
	EXP     int
	Point   int
	Special interface{}
	// 新增：怪物类型标识
	MonsterType string // "normal", "yellow_door"
}

// 区域定义
type Area struct {
	ID        int
	Treasures []TreasureItem
	Neighbors []Neighbor
	Positions [][2]int
}

// 宝物项定义
type TreasureItem struct {
	ID         int
	Type       string
	Value      int
	OriginalID int
}

// 邻居连接定义
type Neighbor struct {
	Area       int
	MonsterID  int
	Monster    Monster
	MonsterPos [2]int
}

// 怪物连接定义 - 一个怪物可以连接多个区域
type MonsterConnection struct {
	MonsterID      int
	Monster        Monster
	MonsterPos     [2]int
	ConnectedAreas []int
}

// 图结构定义
type Graph struct {
	Areas              []Area
	StartArea          int
	EndArea            int
	AreaMap            [][]int
	MonsterConnections map[string]MonsterConnection // key为"x,y"格式的怪物位置
}

// 全局宝物定义
type GlobalTreasure struct {
	ID         string
	AreaID     int
	Type       string
	Value      int
	OriginalID int
}

// 全局怪物定义
type GlobalMonster struct {
	Key            string
	ID             int
	Monster        Monster
	Pos            [2]int
	ConnectedAreas []int
}

// 状态定义 - 修改为支持钥匙
type State struct {
	HP                 int
	ATK                int
	DEF                int
	YellowKeys         int                // 新增：黄钥匙数量
	DefeatedMonsters   map[int]bool       // 对于黄门，这里记录已开启的门
	CollectedTreasures map[int]bool
	Path               []string
}

// 搜索结果定义
type SearchResult struct {
	HP             int
	ATK            int
	DEF            int
	YellowKeys     int    // 新增：最终黄钥匙数量
	Path           []string
	DefeatedCount  int
	CollectedCount int
	Message        string
}

// 全局变量 - 修改为支持黄门黄钥匙
var (
	gameMap = [][]int{
		{1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1},
		{1, 31, 0, 202, 28, 31, 201, 27, 202, 1, 27, 0, 1},
		{1, 203, 1, 1, 1, 206, 1, 1, 31, 204, 0, 1, 1},
		{1, 0, 27, 1, 28, 0, 203, 0, 206, 1, 31, 201, 1},
		{1, 1, 1, 1, 205, 1, 1, 31, 0, 1, 1, 1, 1},
		{1, 0, 204, 0, 0, 27, 1, 0, 203, 27, 1, 27, 1},
		{1, 31, 0, 1, 206, 1, 1, 206, 1, 1, 1, 31, 1},
		{1, 1, 28, 1, 28, 0, 1, 0, 0, 28, 1, 0, 1},
		{1, 31, 202, 1, 1, 203, 1, 1, 203, 1, 1, 204, 1},
		{1, 0, 201, 1, 31, 0, 1, 31, 0, 1, 0, 28, 1},
		{1, 1, 28, 1, 1, 1, 1, 1, 202, 1, 205, 1, 1},
		{1, 31, 0, 0, 0, 205, 0, 201, 0, 27, 0, 0, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
	}

	// 修改宝物映射，添加黄钥匙
	treasureMap = map[int]Treasure{
		27:  {Type: "atk", Value: 1},
		28:  {Type: "def", Value: 1},
		31:  {Type: "hp", Value: 50},
		101: {Type: "yellow_key", Value: 1}, // 新增：黄钥匙
	}

	// 修改怪物映射，添加黄门
	monsterMap = map[int]Monster{
		201: {Name: "绿头怪", HP: 50, ATK: 19, DEF: 1, Money: 0, EXP: 0, Point: 0, Special: 0, MonsterType: "normal"},
		202: {Name: "红头怪", HP: 40, ATK: 22, DEF: 0, Money: 0, EXP: 0, Point: 0, Special: []interface{}{}, MonsterType: "normal"},
		203: {Name: "青头怪", HP: 35, ATK: 23, DEF: 3, Money: 0, EXP: 0, Point: 0, Special: 0, MonsterType: "normal"},
		204: {Name: "怪王", HP: 44, ATK: 17, DEF: 2, Money: 10, EXP: 0, Point: 0, Special: []interface{}{}, MonsterType: "normal"},
		205: {Name: "小蝙蝠", HP: 28, ATK: 25, DEF: 3, Money: 0, EXP: 0, Point: 0, Special: []interface{}{}, MonsterType: "normal"},
		206: {Name: "大蝙蝠", HP: 33, ATK: 30, DEF: 1, Money: 0, EXP: 0, Point: 0, Special: 0, MonsterType: "normal"},
		2:   {Name: "黄门", HP: 1, ATK: 0, DEF: 0, Money: 0, EXP: 0, Point: 0, Special: 0, MonsterType: "yellow_door"}, // 新增：黄门
	}

	start = [2]int{11, 6}
	end   = [2]int{0, 7}

	minATK    = 8
	maxATK    = 15
	minDEF    = 8
	maxDEF    = 15
	maxDamage = 9999

	damageCache = make(map[int]map[int]map[int]int)
)

// 新增：检查状态是否能通过怪物的函数
func canDefeatMonster(state State, monster Monster, monsterID int) (bool, int) {
	// 检查是否已经击败/开启
	if state.DefeatedMonsters[monsterID] {
		return true, 0 // 已击败，伤害为0
	}

	switch monster.MonsterType {
	case "yellow_door":
		// 黄门逻辑：需要黄钥匙才能开启
		if state.YellowKeys > 0 {
			return true, 0 // 有钥匙，可以开启，伤害为0
		} else {
			return false, maxDamage // 没钥匙，无法通过，伤害设为最大值
		}
	case "normal":
		fallthrough
	default:
		// 普通怪物逻辑：计算战斗伤害
		if state.ATK <= monster.DEF {
			return false, maxDamage // 无法击败
		}

		// 计算伤害（这里需要实现具体的伤害计算逻辑）
		damage := calculateDamage(state.HP, state.ATK, state.DEF, monster)
		if damage >= state.HP {
			return false, maxDamage // 会死亡
		}
		return true, damage
	}
}

// 新增：战后状态更新函数
func updateStateAfterBattle(state State, monster Monster, monsterID int) State {
	newState := state

	// 标记怪物已击败
	if newState.DefeatedMonsters == nil {
		newState.DefeatedMonsters = make(map[int]bool)
	}
	newState.DefeatedMonsters[monsterID] = true

	switch monster.MonsterType {
	case "yellow_door":
		// 开启黄门：消耗一把黄钥匙
		if newState.YellowKeys > 0 {
			newState.YellowKeys--
		}
		// 黄门开启后不影响HP/ATK/DEF
	case "normal":
		fallthrough
	default:
		// 普通怪物：扣除HP，可能增加金钱/经验等
		damage := calculateDamage(state.HP, state.ATK, state.DEF, monster)
		newState.HP -= damage
		// 这里可以添加金钱、经验等奖励
	}

	return newState
}

// 新增：收集宝物后状态更新函数
func updateStateAfterTreasure(state State, treasure TreasureItem) State {
	newState := state

	// 标记宝物已收集
	if newState.CollectedTreasures == nil {
		newState.CollectedTreasures = make(map[int]bool)
	}
	newState.CollectedTreasures[treasure.OriginalID] = true

	// 根据宝物类型更新状态
	switch treasure.Type {
	case "hp":
		newState.HP += treasure.Value
	case "atk":
		newState.ATK += treasure.Value
	case "def":
		newState.DEF += treasure.Value
	case "yellow_key":
		newState.YellowKeys += treasure.Value // 增加黄钥匙数量
	}

	return newState
}

// 伤害计算函数（简化版本，需要根据实际游戏逻辑实现）
func calculateDamage(playerHP, playerATK, playerDEF int, monster Monster) int {
	// 简化的伤害计算逻辑
	// 实际应该根据游戏规则实现更复杂的计算
	playerDamage := playerATK - monster.DEF
	if playerDamage <= 0 {
		return maxDamage // 无法造成伤害
	}

	monsterDamage := monster.ATK - playerDEF
	if monsterDamage <= 0 {
		return 0 // 怪物无法造成伤害
	}

	// 计算需要多少轮击败怪物
	rounds := (monster.HP + playerDamage - 1) / playerDamage // 向上取整
	totalDamage := rounds * monsterDamage

	return totalDamage
}

// 地图转图转换器保持不变
type MapToGraphConverter struct {
	gameMap            [][]int
	rows               int
	cols               int
	treasureMap        map[int]Treasure
	monsterMap         map[int]Monster
	start              [2]int
	end                [2]int
	directions         [][2]int
	areas              []Area
	monsterConnections map[string]map[int]bool
}

// 创建新的转换器
func NewMapToGraphConverter(gameMap [][]int, treasureMap map[int]Treasure, monsterMap map[int]Monster, start, end [2]int) *MapToGraphConverter {
	return &MapToGraphConverter{
		gameMap:            gameMap,
		rows:               len(gameMap),
		cols:               len(gameMap[0]),
		treasureMap:        treasureMap,
		monsterMap:         monsterMap,
		start:              start,
		end:                end,
		directions:         [][2]int{{-1, 0}, {1, 0}, {0, -1}, {0, 1}},
		areas:              []Area{},
		monsterConnections: make(map[string]map[int]bool),
	}
}

// 检查位置是否有效
func (c *MapToGraphConverter) isValidPosition(pos [2]int) bool {
	x, y := pos[0], pos[1]
	return x >= 0 && x < c.rows && y >= 0 && y < c.cols && c.gameMap[x][y] != 1
}

// Convert函数保持基本不变，因为黄门在这个阶段被当作普通怪物处理
func (c *MapToGraphConverter) Convert() Graph {
	// 实现与原代码相同，黄门会被正确识别为怪物并处理
	visited := make([][]int, c.rows)
	for i := range visited {
		visited[i] = make([]int, c.cols)
		for j := range visited[i] {
			visited[i][j] = -1
		}
	}

	areaCount := 0
	startArea := -1
	endArea := -1

	// 第一遍遍历：标记连通区域
	for i := 0; i < c.rows; i++ {
		for j := 0; j < c.cols; j++ {
			cellValue := c.gameMap[i][j]

			// 跳过墙、已访问位置和怪物位置（包括黄门）
			if visited[i][j] != -1 || cellValue == 1 {
				continue
			}
			if _, exists := c.monsterMap[cellValue]; exists {
				continue
			}

			areaID := areaCount
			queue := [][2]int{{i, j}}
			visited[i][j] = areaID
			area := Area{
				ID:        areaID,
				Treasures: []TreasureItem{},
				Neighbors: []Neighbor{},
				Positions: [][2]int{},
			}

			for len(queue) > 0 {
				pos := queue[0]
				queue = queue[1:]
				x, y := pos[0], pos[1]
				area.Positions = append(area.Positions, [2]int{x, y})

				// 检查是否为起点或终点
				if x == c.start[0] && y == c.start[1] {
					startArea = areaID
				}
				if x == c.end[0] && y == c.end[1] {
					endArea = areaID
				}

				// 检查是否有宝物（包括黄钥匙）
				cellVal := c.gameMap[x][y]
				if treasure, exists := c.treasureMap[cellVal]; exists {
					area.Treasures = append(area.Treasures, TreasureItem{
						ID:         len(area.Treasures),
						Type:       treasure.Type,
						Value:      treasure.Value,
						OriginalID: cellVal,
					})
				}

				// 探索四个方向
				for _, dir := range c.directions {
					nx, ny := x+dir[0], y+dir[1]
					if nx < 0 || nx >= c.rows || ny < 0 || ny >= c.cols {
						continue
					}
					if visited[nx][ny] != -1 || c.gameMap[nx][ny] == 1 {
						continue
					}

					neighborVal := c.gameMap[nx][ny]
					if _, exists := c.monsterMap[neighborVal]; exists {
						// 记录怪物连接（包括黄门）
						key := fmt.Sprintf("%d,%d", nx, ny)
						if c.monsterConnections[key] == nil {
							c.monsterConnections[key] = make(map[int]bool)
						}
						c.monsterConnections[key][areaID] = true
					} else {
						// 空地或宝物，加入当前区域
						visited[nx][ny] = areaID
						queue = append(queue, [2]int{nx, ny})
					}
				}
			}
			c.areas = append(c.areas, area)
			areaCount++
		}
	}

	// 第二遍遍历：构建怪物连接信息（包括黄门）
	monsterConnections := make(map[string]MonsterConnection)

	for monsterPos, areas := range c.monsterConnections {
		areaList := make([]int, 0, len(areas))
		for area := range areas {
			areaList = append(areaList, area)
		}

		if len(areaList) >= 2 {
			parts := strings.Split(monsterPos, ",")
			x, _ := strconv.Atoi(parts[0])
			y, _ := strconv.Atoi(parts[1])
			monsterID := c.gameMap[x][y]
			monster := c.monsterMap[monsterID]

			// 创建怪物连接信息（包括黄门）
			monsterConnections[monsterPos] = MonsterConnection{
				MonsterID:      monsterID,
				Monster:        monster,
				MonsterPos:     [2]int{x, y},
				ConnectedAreas: areaList,
			}

			// 为每个相关区域添加连接引用
			for _, areaID := range areaList {
				neighbor := Neighbor{
					Area:       -1, // 特殊标记，表示这是一个多区域连接
					MonsterID:  monsterID,
					Monster:    monster,
					MonsterPos: [2]int{x, y},
				}
				c.areas[areaID].Neighbors = append(c.areas[areaID].Neighbors, neighbor)
			}
		}
	}

	return Graph{
		Areas:              c.areas,
		StartArea:          startArea,
		EndArea:            endArea,
		AreaMap:            visited,
		MonsterConnections: monsterConnections,
	}
}